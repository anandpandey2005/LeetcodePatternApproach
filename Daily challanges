|      1 problem set      |
--------------------------
You are given a 0-indexed array nums of size n consisting of non-negative integers.

You need to apply n - 1 operations to this array where, in the ith operation (0-indexed), you will apply the following on the ith element of nums:

If nums[i] == nums[i + 1], then multiply nums[i] by 2 and set nums[i + 1] to 0. Otherwise, you skip this operation.
After performing all the operations, shift all the 0's to the end of the array.

For example, the array [1,0,2,0,0,1] after shifting all its 0's to the end, is [1,2,1,0,0,0].
Return the resulting array.

Note that the operations are applied sequentially, not all at once.

----------   Approach  ---------

Modify the Array In-Place:

Traverse the array linearly and apply the given condition.
If nums[i] == nums[i + 1] and nums[i] != 0, then double nums[i] and set nums[i + 1] to 0.
Since modifications happen directly in the original array, no extra space is used for this step.
Move All Zeros to the End:

After applying the transformations, shift all zeros to the end of the array.
If you have solved the "Move Zeros" problem before, you can directly apply that approach here. Otherwise, you can use the two-pointer method as explained below.
Space Complexity Considerations:

O(n) Space:
Create a separate vector arr to store all non-zero elements.
After filling arr, append zeros until its size matches the original array size.
This requires additional memory proportional to the input size.
O(1) Space (In-Place Solution):
Use a two-pointer approach for in-place modifications.
Maintain a variable trackPosition to track the index where the next non-zero element should be placed.
Traverse the array and swap non-zero elements with elements at trackPosition, then increment trackPosition.

----------  source code ----------

class Solution {
public:
    vector<int> applyOperations(vector<int>& nums) {

        // vector<int> ans;
        int size = nums.size();

        for (int i = 1; i < size; i++) {

            if (nums[i - 1] == nums[i] && nums[i - 1] != 0) {
                nums[i - 1] = nums[i - 1] * 2;
                nums[i] = 0;
            }
        }

        int trackPosition = 0;

        for (int i = 0; i < size; i++) {

            if (nums[i] != 0) {
                swap(nums[i], nums[trackPosition]);
                trackPosition++;
            }
        }

        // for (int it : nums) {

        //     if (it != 0) {
        //         ans.push_back(it);
        //     }
        // }

        // while (ans.size() != size) {
        //     ans.push_back(0);
        // }
        //  return ans;
        return nums;
    }
};
